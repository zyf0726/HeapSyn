resolve begin

-----------------------------------------------
-- representation invariant for AATree

-- nullNode is not null 
{R_ANY}.example/kiasan/aatree/AATree:nullNode instanceof example/kiasan/aatree/AATree$AANode not null;

-- nullNode.left == nullNode
{R_ANY}.example/kiasan/aatree/AATree:nullNode.example/kiasan/aatree/AATree$AANode:left instanceof example/kiasan/aatree/AATree$AANode not null;
{R_ANY}.example/kiasan/aatree/AATree:nullNode.example/kiasan/aatree/AATree$AANode:left instanceof example/kiasan/aatree/AATree$AANode expands to nothing;
{R_ANY}.example/kiasan/aatree/AATree:nullNode.example/kiasan/aatree/AATree$AANode:left instanceof example/kiasan/aatree/AATree$AANode aliases target {$R_ANY}.example/kiasan/aatree/AATree:nullNode;

-- nullNode.right == nullNode
{R_ANY}.example/kiasan/aatree/AATree:nullNode.example/kiasan/aatree/AATree$AANode:right instanceof example/kiasan/aatree/AATree$AANode not null;
{R_ANY}.example/kiasan/aatree/AATree:nullNode.example/kiasan/aatree/AATree$AANode:right instanceof example/kiasan/aatree/AATree$AANode expands to nothing;
{R_ANY}.example/kiasan/aatree/AATree:nullNode.example/kiasan/aatree/AATree$AANode:right instanceof example/kiasan/aatree/AATree$AANode aliases target {$R_ANY}.example/kiasan/aatree/AATree:nullNode;

-- root/left/right entries expand or alias to nullNode
{R_ANY}.example/kiasan/aatree/AATree:root(.example/kiasan/aatree/AATree$AANode:left|.example/kiasan/aatree/AATree$AANode:right)* instanceof example/kiasan/aatree/AATree$AANode not null;
{R_ANY}.example/kiasan/aatree/AATree:root(.example/kiasan/aatree/AATree$AANode:left|.example/kiasan/aatree/AATree$AANode:right)* instanceof example/kiasan/aatree/AATree$AANode aliases target {$R_ANY}.example/kiasan/aatree/AATree:nullNode;


-----------------------------------------------
-- representation invariant for BinarySearchTree

-- acyclic
{R_ANY}.example/kiasan/bst/BinarySearchTree:root(.example/kiasan/bst/BinaryNode:left|.example/kiasan/bst/BinaryNode:right)* instanceof example/kiasan/bst/BinaryNode aliases nothing;


-----------------------------------------------
-- representation invariant for LeftistHeap

-- acyclic
{R_ANY}.example/kiasan/leftist/LeftistHeap:root(.example/kiasan/leftist/LeftistHeap$LeftistNode:left|.example/kiasan/leftist/LeftistHeap$LeftistNode:right)* instanceof example/kiasan/leftist/LeftistHeap$LeftistNode aliases nothing;


-----------------------------------------------
-- representation invariant for StackLi

-- acyclic
{R_ANY}.example/kiasan/stackli/StackLi:topOfStack(.example/kiasan/stackli/ListNode:next)* instanceof example/kiasan/stackli/ListNode aliases nothing;

-- parameter x and field ListNode.element are both distinct objects or null, or alias of each other
{ROOT}:x instanceof java/lang/Object aliases target {ROOT}:this.example/kiasan/stackli/StackLi:topOfStack(.example/kiasan/stackli/ListNode:next)*.example/kiasan/stackli/ListNode:element;
{ROOT}:this.example/kiasan/stackli/StackLi:topOfStack(.example/kiasan/stackli/ListNode:next)*.example/kiasan/stackli/ListNode:element instanceof java/lang/Object aliases target {ROOT}:x;


resolve end